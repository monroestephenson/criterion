# Use specific platform tag
FROM --platform=linux/amd64 public.ecr.aws/lambda/python:3.9-x86_64 as builder

# Set working directory
WORKDIR ${LAMBDA_TASK_ROOT}

# Install system dependencies first
RUN yum update -y && \
    yum groupinstall -y "Development Tools" && \
    yum install -y \
    gcc \
    gcc-c++ \
    python3-devel \
    swig \
    make \
    cmake \
    openblas-devel

# Copy requirements first
COPY requirements.txt .

# Install dependencies in specific order
RUN pip install --no-cache-dir --target . numpy==1.24.3 && \
    pip install --no-cache-dir --target . faiss-cpu==1.7.4 && \
    pip install --no-cache-dir --target . -r requirements.txt

# Start fresh with a clean image
FROM --platform=linux/amd64 public.ecr.aws/lambda/python:3.9-x86_64

WORKDIR ${LAMBDA_TASK_ROOT}

# Copy only necessary Python packages
COPY --from=builder /var/task/. .

# Set cache directory environment variable
ENV TRANSFORMERS_CACHE="/tmp/huggingface"

# Create necessary directories
RUN mkdir -p data/model_cache data/models /tmp/huggingface

# Copy only necessary application files
COPY ./lambda_handler.py .
COPY ./app.py .
COPY ./movie_clustering.py .
COPY ./transformer_builder.py .
COPY ./data/model_cache/transformer_model.pkl ./data/model_cache/
COPY ./data/model_cache/movie_embeddings.pkl ./data/model_cache/
COPY ./data/models/advanced_subtitle_embeddings.pkl ./data/models/
COPY ./data/models/movie_clusters.pkl ./data/models/

# Set the CMD to your handler
CMD [ "lambda_handler.handler" ] 